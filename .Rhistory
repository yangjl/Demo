ls()
getwd()
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
x <- seq(-4,4,length=100)*1 + 0
hx <- dnorm(x,0,1)
plot(x, hx, type="n", xlab="IQ Values", ylab="", main="Normal Distribution", axes=FALSE)
x <- seq(-4,4,length=100)*15 + 100
hx <- dnorm(x,0,1)
plot(x, hx, type="n", xlab="IQ Values", ylab="", main="Normal Distribution", axes=FALSE)
x
hx
mean=100; sd=15
lb=80; ub=120
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
seq(-4,4,length=100)*sd + mean
x
hx <- dnorm(x,0,1)
plot(x, hx, type="n", xlab="IQ Values", ylab="", main="Normal Distribution", axes=FALSE)
hx
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
data(flight)
getc <- function(tot = 10^7){
a <- sample(1:10^9, tot)
c <- sum(a %in% 1:1000)
return(c)
}
n7 <- replicate(10, getc(tot=10^7))
n7
res <- res.csv("~/Desktop/res.csv")
res <- read.csv("~/Desktop/res.csv")
hist(res$n7)
par(mfrow=c(1,2))
hist(res$n7)
par(mfrow=c(2,1))
hist(res$n7)
hist(res$n8)
range(res$n7)
range(res$n8)
hist(res$n7, xlim=c(0, 20))
hist(res$n8, xlim=c(0, 200))
hist(res$n7, xlim=c(0, 20), main= paste("Sampling", expression(10^7), "Molecules" )
)
expression(10^7)
?expression
hist(res$n7, xlim=c(0, 20), main= labels=expression(0, 5%*%10^5, 1.5%*%10^6, 2.5%*%10^6) )
hist(res$n7, xlim=c(0, 20), main=expression(0, 5%*%10^5, 1.5%*%10^6, 2.5%*%10^6) )
hist(res$n7, xlim=c(0, 20), labels= expression(0, 5%*%10^5, 1.5%*%10^6, 2.5%*%10^6) )
x <- seq(-4, 4, len = 101)
y <- cbind(sin(x), cos(x))
matplot(x, y, type = "l", xaxt = "n",
main = expression(paste(plain(sin) * phi, "  and  ",
plain(cos) * phi)),
ylab = expression("sin" * phi, "cos" * phi), # only 1st is taken
xlab = expression(paste("Phase Angle ", phi)),
col.main = "blue")
axis(1, at = c(-pi, -pi/2, 0, pi/2, pi),
labels = expression(-pi, -pi/2, 0, pi/2, pi))
hist(res$n7, xlim=c(0, 20), main = expression(0, 5%*%10^5, 1.5%*%10^6, 2.5%*%10^6) )
hist(res$n7, xlim=c(0, 20), main = expression(5%*%10^5, 1.5%*%10^6, 2.5%*%10^6) )
hist(res$n7, xlim=c(0, 20), main = expression(paste("Sampling", 10^7, "Molecules")), xlab="" )
hist(res$n7, xlim=c(0, 20), main = expression(paste("Sampling ", 10^7, " Molecules")), xlab="" )
par(mfrow=c(2,1))
hist(res$n7, xlim=c(0, 20), main = expression(paste("Sampling ", 10^7, " Molecules")), xlab="" )
hist(res$n8, xlim=c(0, 200), main = expression(paste("Sampling ", 10^8, " Molecules")), xlab="" )
library(GenomicFeatures)
install.packages("GenomicFeatures")
library(GenomicFeatures)
install.packages("GenomicsFeatures")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
library(GenomicFeatures)
?makeTranscriptDbFromGFF
?makeTranscriptDbFromGFF()
browseVignettes("GenomicFeatures")
###################################################
### code chunk number 2: loadDb
###################################################
samplefile <- system.file("extdata", "UCSC_knownGene_sample.sqlite",
package="GenomicFeatures")
txdb <- loadDb(samplefile)
version()
version
library(GenomicFeatures)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
library(GenomicFeatures)
?makeTranscriptDbFromGFF
txdb <- makeTranscriptDbFromGFF(
file="data/Osativa_204_v7.0.gene_exons",
format="gff3", species="oryza_indica",useGenesAsTranscripts=FALSE,
dataSource="http://genome.jgi.doe.gov/pages/dynamicOrganismDownload.jsf?organism=Osativa")
saveDb(txdb, file="cache/Osativa_204_v7.0.sqlite")
txdb <- loadDb("cache/Osativa_204_v7.0.sqlite")
columns(txdb)
keytypes(txdb)
eByg <- exonsBy(txdb, by="gene")
length(eByg)
?readGAlignmentsFromBam
?system
system("head data/subset.fastq")
system("head data/subset.fastq")
160468896/4
1000000/40000
160468896/4
4000000/4
fastqfile = "largedata/sample.txt"
fqfile = "largedata/sample.txt"
fq <- read.table(fqfile, header=TRUE)
fq
PE_qc <- function(fqfile = "largedata/sample.txt", shfile = "largedata/step1_qc.sh",
q = 25, p =50){
fq <- read.table(fqfile, header=TRUE)
cat(paste("#quality checking", Sys.time(), sep=" "),
paste("module load FASTX-Toolkit/0.0.13.2-goolf-1.4.10"),
file=shfile, sep="\n")
for(i in 1:nrow(fq)){
fq1 <- fq$fq1[i]
stat1 <- paste(fq1, "stat", sep=".")
qcpng1 <- paste(fq1, "qc.png", sep=".")
nudpng1 <- paste(fq1, "nud.png", sep=".")
gz1 <- paste(fq1, "fq.gz", sep=".")
res1 <- paste(fq1, ".res", sep=".")
fq2 <- fq$fq2[i]
stat2 <- paste(fq2, "stat", sep=".")
qcpng2 <- paste(fq2, "qc.png", sep=".")
nudpng2 <- paste(fq2, "nud.png", sep=".")
gz2 <- paste(fq2, "fq.gz", sep=".")
res2 <- paste(fq2, ".res", sep=".")
cat(
#### quality checking stat
#fastx_quality_stats -Q33 -i leaf.rep3_1.fastq -o leaf.rep3_1.stat2
paste("fastx_quality_stats -Q33 -i", fq1, "-o", stat1, sep=" "),
paste("fastx_quality_stats -Q33 -i", fq2, "-o", stat2, sep=" "),
#fastq_quality_boxplot_graph.sh -i leaf.rep3_1.stat2 -o leaf.rep3_1.qc.png -t "leaf.rep3_1"
paste("fastq_quality_boxplot_graph.sh -i", stat1, "-o", qcpng1, "-t", fq1),
paste("fastq_quality_boxplot_graph.sh -i", stat2, "-o", qcpng2, "-t", fq2),
#fastx_nucleotide_distribution_graph.sh -i leaf.rep3_1.stat1 -o leaf.rep3_1.nud.png -t "leaf.rep3_1"
paste("fastx_nucleotide_distribution_graph.sh -i", stat1, "-o", nudpng1, "-t", fq1),
paste("fastx_nucleotide_distribution_graph.sh -i", stat2, "-o", nudpng2, "-t", fq2),
#### quality filter
### Usually qualities over 30 are considered good and under 20 are considered bad
#fastq_quality_filter -Q33 -q 25 -p 50 -i leaf.rep3_1.fastq -o leaf.rep3_1_qf.fq -v > leaf.rep3_1.qf
paste("fastq_quality_filter -Q33 -q", q, "-p", p, "-z -i", fq1, "-o", gz1, "-v >", res1),
paste("fastq_quality_filter -Q33 -q", q, "-p", p, "-z -i", fq2, "-o", gz2, "-v >", res2),
file=shfile, sep="\n", append=TRUE)
}
}
PE_qc <- function(fqfile = "largedata/sample.txt", shfile = "largedata/step1_qc.sh",
q = 25, p =50){
fq <- read.table(fqfile, header=TRUE)
cat(paste("#quality checking", Sys.time(), sep=" "),
paste("module load FASTX-Toolkit/0.0.13.2-goolf-1.4.10"),
file=shfile, sep="\n")
for(i in 1:nrow(fq)){
fq1 <- fq$fq1[i]
stat1 <- paste(fq1, "stat", sep=".")
qcpng1 <- paste(fq1, "qc.png", sep=".")
nudpng1 <- paste(fq1, "nud.png", sep=".")
gz1 <- paste(fq1, "fq.gz", sep=".")
res1 <- paste(fq1, ".res", sep=".")
fq2 <- fq$fq2[i]
stat2 <- paste(fq2, "stat", sep=".")
qcpng2 <- paste(fq2, "qc.png", sep=".")
nudpng2 <- paste(fq2, "nud.png", sep=".")
gz2 <- paste(fq2, "fq.gz", sep=".")
res2 <- paste(fq2, ".res", sep=".")
cat(
#### quality checking stat
#fastx_quality_stats -Q33 -i leaf.rep3_1.fastq -o leaf.rep3_1.stat2
paste("fastx_quality_stats -Q33 -i", fq1, "-o", stat1, sep=" "),
paste("fastx_quality_stats -Q33 -i", fq2, "-o", stat2, sep=" "),
#fastq_quality_boxplot_graph.sh -i leaf.rep3_1.stat2 -o leaf.rep3_1.qc.png -t "leaf.rep3_1"
paste("fastq_quality_boxplot_graph.sh -i", stat1, "-o", qcpng1, "-t", fq1),
paste("fastq_quality_boxplot_graph.sh -i", stat2, "-o", qcpng2, "-t", fq2),
#fastx_nucleotide_distribution_graph.sh -i leaf.rep3_1.stat1 -o leaf.rep3_1.nud.png -t "leaf.rep3_1"
paste("fastx_nucleotide_distribution_graph.sh -i", stat1, "-o", nudpng1, "-t", fq1),
paste("fastx_nucleotide_distribution_graph.sh -i", stat2, "-o", nudpng2, "-t", fq2),
#### quality filter
### Usually qualities over 30 are considered good and under 20 are considered bad
#fastq_quality_filter -Q33 -q 25 -p 50 -i leaf.rep3_1.fastq -o leaf.rep3_1_qf.fq -v > leaf.rep3_1.qf
paste("fastq_quality_filter -Q33 -q", q, "-p", p, "-z -i", fq1, "-o", gz1, "-v >", res1),
paste("fastq_quality_filter -Q33 -q", q, "-p", p, "-z -i", fq2, "-o", gz2, "-v >", res2),
file=shfile, sep="\n", append=TRUE)
}
message(sprintf("###>>> [%s] generated!", shfile))
}
PE_qc(fqfile = "largedata/sample.txt", shfile = "largedata/step1_qc.sh",
q = 25, p =50)
PE_qc <- function(fqfile = "largedata/sample.txt", shfile = "largedata/step1_qc.sh",
q = 25, p =50){
fq <- read.table(fqfile, header=TRUE)
cat(paste("#quality checking", Sys.time(), sep=" "),
paste("module load FASTX-Toolkit/0.0.13.2-goolf-1.4.10"),
"",
file=shfile, sep="\n")
for(i in 1:nrow(fq)){
fq1 <- fq$fq1[i]
stat1 <- paste(fq1, "stat", sep=".")
qcpng1 <- paste(fq1, "qc.png", sep=".")
nudpng1 <- paste(fq1, "nud.png", sep=".")
gz1 <- paste(fq1, "fq.gz", sep=".")
res1 <- paste(fq1, ".res", sep=".")
fq2 <- fq$fq2[i]
stat2 <- paste(fq2, "stat", sep=".")
qcpng2 <- paste(fq2, "qc.png", sep=".")
nudpng2 <- paste(fq2, "nud.png", sep=".")
gz2 <- paste(fq2, "fq.gz", sep=".")
res2 <- paste(fq2, ".res", sep=".")
cat(
#### quality checking stat
#fastx_quality_stats -Q33 -i leaf.rep3_1.fastq -o leaf.rep3_1.stat2
paste("fastx_quality_stats -Q33 -i", fq1, "-o", stat1, sep=" "),
paste("fastx_quality_stats -Q33 -i", fq2, "-o", stat2, sep=" "),
#fastq_quality_boxplot_graph.sh -i leaf.rep3_1.stat2 -o leaf.rep3_1.qc.png -t "leaf.rep3_1"
paste("fastq_quality_boxplot_graph.sh -i", stat1, "-o", qcpng1, "-t", fq1),
paste("fastq_quality_boxplot_graph.sh -i", stat2, "-o", qcpng2, "-t", fq2),
#fastx_nucleotide_distribution_graph.sh -i leaf.rep3_1.stat1 -o leaf.rep3_1.nud.png -t "leaf.rep3_1"
paste("fastx_nucleotide_distribution_graph.sh -i", stat1, "-o", nudpng1, "-t", fq1),
paste("fastx_nucleotide_distribution_graph.sh -i", stat2, "-o", nudpng2, "-t", fq2),
#### quality filter
### Usually qualities over 30 are considered good and under 20 are considered bad
#fastq_quality_filter -Q33 -q 25 -p 50 -i leaf.rep3_1.fastq -o leaf.rep3_1_qf.fq -v > leaf.rep3_1.qf
paste("fastq_quality_filter -Q33 -q", q, "-p", p, "-z -i", fq1, "-o", gz1, "-v >", res1),
paste("fastq_quality_filter -Q33 -q", q, "-p", p, "-z -i", fq2, "-o", gz2, "-v >", res2),
"",
file=shfile, sep="\n", append=TRUE)
}
message(sprintf("###>>> [ %s ] generated!", shfile))
}
PE_qc(fqfile = "largedata/sample.txt", shfile = "largedata/step1_qc.sh",
q = 25, p =50)
source("lib/setUpslurm.R")
source("lib/setUpslurm.R")
setUpslurm(slurmsh="largedata/slurm_step1_qc.sh",
codesh="sh largedata/step1_qc.sh",
wd=NULL, jobid="myjob")
source("lib/setUpslurm.R")
setUpslurm(slurmsh="largedata/slurm_step1_qc.sh",
codesh="sh largedata/step1_qc.sh",
wd=NULL, jobid="myjob", email="yangjl0930@gmail.com")
source("lib/setUpslurm.R")
setUpslurm(slurmsh="largedata/slurm_step1_qc.sh",
codesh="sh largedata/step1_qc.sh",
wd=NULL, jobid="myjob", email="yangjl0930@gmail.com")
########################################################################################
setup_PE_alignment <- function(
fqfile = "largedata/sample.txt", shfile = "largedata/step2_align.sh", cpu=8
){
cat(paste("# setup alignment", Sys.time(), sep=" "),
"module load gmap/2014-05-15",
"",
file=shfile, sep="\n")
fq <- read.table(fqfile, header=TRUE)
for(i in 1:nrow(fq)){
###########
fq1 <- paste0("largedata/", fq$fq1[i])
qc1 <- paste0(fq1, ".qc")
fq2 <- paste0("largedata/", fq$fq2[i])
qc2 <- paste0(fq2, ".qc")
prefix <- gsub("\\.*$", "", fq1)
uniq <- paste(prefix, "paired_uniq", sep=".")
bam <- paste(prefix, "paired_uniq.bam", sep=".")
cat(paste("cd", folder),
#### GSNAP alignment
# -m miss match
# -i indel penalty
# N: look for novel splicing, 1=yes
# -w: definition of local novel splicing event
# -A: output sam format
# -t: number of CPU to use
# -n: max number of paths to print
paste("gsnap -D largedata/OS_indica -d ASM465v1.25_gsnap -m 10 -i 2 -N 1 -w 10000 -A sam -t", cpu,
"-n 3 --quality-protocol=sanger --nofails",
qc1, qc2, "--split-output", prefix, sep=" "),
### extract the unique (or reliable) aligned reads
#http://sourceforge.net/apps/mediawiki/samtools/index.php?title=SAM_FAQ
paste("samtools view -bS", uniq, ">", bam, sep=" "),
"",
file=shfile, sep="\n", append=TRUE)
}
message(sprintf("###>>> Generate [ %s ] for alignment using GSNAP!", shfile))
}
source("lib/PE_alignment.R")
setup_PE_alignment(
fqfile = "largedata/sample.txt", shfile = "largedata/step2_align.sh", cpu=8
)
######################################################################
source("lib/PE_alignment.R")
setup_PE_alignment(
fqfile = "largedata/sample.txt", shfile = "largedata/step2_align.sh", cpu=8
)
?Read.table
?read.table
library(genomeIntervals)
source("http://bioconductor.org/biocLite.R")
biocLite("genomeIntervals")
512*10
512*20
794/60
library(ape)
install.package(ape)
install.packages(ape)
install.packages("ape")
source("lib/readcount.R")
rc <- read.csv("largedata/readcount.csv")
rpkm <- apply(rc, 2, function(x) returnRPKM(counts=x, gffsub=eByg))
source("lib/readcount.R")
library(GenomicAlignments)
library(GenomicFeatures)
library(GenomicAlignments)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
library(GenomicFeatures)
library(GenomicAlignments)
#### load db
txdb <- loadDb(featureDB)
#columns(txdb)
#keytypes(txdb)
eByg <- exonsBy(txdb, by="gene")
featureDB <- "largedata/Osativa_204_v7.0.sqlite"
samples <- "largedata/sample.txt"
#### load db
txdb <- loadDb(featureDB)
#columns(txdb)
#keytypes(txdb)
eByg <- exonsBy(txdb, by="gene")
rc <- ReadCount(eByg = eByg, fastqfile = samples)
source("lib/readcount.R")
rc <- ReadCount(eByg = eByg, fastqfile = samples)
rc <- read.csv("largedata/readcount.csv")
rpkm <- apply(rc, 2, function(x) returnRPKM(counts=x, gffsub=eByg))
#QC check of the sample reproducibility by computing a correlating matrix and plotting it as a tree.
#Note: the plotMDS function from edgeR is a more robust method for this task.
library(ape)
d <- cor(rpkm, method="spearman")
hc <- hclust(dist(1-d))
plot.phylo(as.phylo(hc), type="p", edge.col=4, edge.width=3, show.node.label=TRUE, no.margin=TRUE)
write.table(rpkm, "largedata/rpkm.csv", sep=",", row.names=FALSE, quote=FALSE)
library(DESeq2)
install.package("DESeq2")
install.packages("DESeq2")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
?DESeqDataSetFromMatrix
nm <- names(rc)
nm
nm <- gsub("^leaf\\.", "", nm)
nm
targets$fq1 <- gsub("leaf\\/", "", targets$fq1)
source("profiling/1.RNA-seq/1.A.1_run_qc.R")
rc <- read.csv("largedata/readcount.csv")
head(rc)
hist(rc[,1])
rpkm <- read.csv("largedata/rpkm.csv")
hist(rpkm[,1])
tem <- rpkm[,1]
hist(tem[tem!=0])
hist(tem[tem>0])
hist(tem[tem>1])
hist(tem[tem>10])
density(tem[tem>10])
plot(density(tem[tem>10]))
### input
for(i in 1:6){
samples = paste0("largedata/sample", i, ".txt")
### output scripts
shfile = paste0("largedata/step2_align", i, ".sh")
slurmfile = paste0("largedata/slurm_step2_align", i, ".sh")
### number of CPU to use for mapping
cpu = 16
######################################################################
source("lib/PE_alignment.R")
setup_PE_alignment(fqfile = samples, shfile = shfile, cpu=cpu)
source("lib/setUpslurm.R")
setUpslurm(slurmsh=slurmfile, wd=NULL, jobid= paste0("align", i),
codesh= paste("module load gmap/2014-05-15",paste("sh", shfile), sep="\n"))
###>>> In this path: cd /home/jolyang/Documents/Github/Demo
###>>> [ note: --ntasks=INT, number of cup ]
###>>> [ note: --mem=16000, 16G memory ]
###>>> RUN: sbatch -p bigmemh --ntasks 16 largedata/slurm_step2_align.sh
}
library(DESeq2)
rc <- read.csv("largedata/readcount.csv")
nm <- names(rc)
nm <- gsub("^leaf\\.", "", nm)
nm <- gsub("^root\\.", "", nm)
names(rc) <- nm
rc
targets <- read.table(samples, header=TRUE)
targets$fq1 <- gsub(".*\\/", "", targets$fq1)
samples <- "largedata/sample.txt"
targets <- read.table(samples, header=TRUE)
targets$fq1 <- gsub(".*\\/", "", targets$fq1)
targets
?DESeqDataSetFromMatrix
source("lib/SE_alignment.R")
source("lib/setUpslurm.R")
